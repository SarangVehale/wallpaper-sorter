#!/bin/bash
set -euo pipefail

# === Configuration & Defaults ===
CONFIG_FILE="$HOME/.config/wallpaper-sorter/config"
LOG_FILE="$HOME/.cache/wallpaper_sorter.log"
BASE_DIR="${BASE_DIR:-$HOME/Pictures/wallpapers}"
DAY_DIR="$BASE_DIR/day"
NIGHT_DIR="$BASE_DIR/night"
THRESHOLD=100 # brightness threshold (0-255)
JOBS=8

# Flags (defaults)
FORCE=false
VERBOSE=false
DRY_RUN=false
ONLY_FOLDER=""
LOOP=false

# === Logging helper ===
log() {
	echo "[$(date '+%F %T')] $1" | tee -a "$LOG_FILE"
}

# === Prompt yes/no helper ===
prompt_yes_no() {
	local prompt="$1"
	read -rp "$prompt [y/N]: " answer
	[[ "$answer" =~ ^[Yy]$ ]]
}

# === Duplicate handling prompt ===
prompt_duplicate_resolution() {
	local dest="$1"
	local src="$2"
	echo "Duplicate file exists:"
	echo "  Target: $dest"
	echo "  Source: $src"
	echo "Options:"
	echo "  1) Rename this file"
	echo "  2) Mass rename all duplicates"
	echo "  3) Skip this file"
	read -rp "Choose an option [3]: " choice
	choice="${choice:-3}"
	echo "$choice"
}

# === Load config if present ===
if [[ -f "$CONFIG_FILE" ]]; then
	# shellcheck disable=SC1090
	source "$CONFIG_FILE"
	log "[INFO] Loaded config from $CONFIG_FILE"
fi

# === Setup systemd timer ===
setup_systemd_timer() {
	local SYSTEMD_DIR="$HOME/.config/systemd/user"
	mkdir -p "$SYSTEMD_DIR"
	local SERVICE_FILE="$SYSTEMD_DIR/wallpaper-sorter.service"
	local TIMER_FILE="$SYSTEMD_DIR/wallpaper-sorter.timer"

	cat >"$SERVICE_FILE" <<EOF
[Unit]
Description=Wallpaper Sorter Service

[Service]
Type=oneshot
ExecStart=$(realpath "$0") --force
EOF

	cat >"$TIMER_FILE" <<EOF
[Unit]
Description=Runs wallpaper-sorter every 30 minutes

[Timer]
OnBootSec=5min
OnUnitActiveSec=30min
Persistent=true

[Install]
WantedBy=default.target
EOF

	systemctl --user daemon-reload
	systemctl --user enable --now wallpaper-sorter.timer
	log "[INFO] Systemd timer installed and started."
}

# === Setup cron job ===
setup_cron_job() {
	local cron_line="*/30 * * * * $(realpath "$0") --force"
	(
		crontab -l 2>/dev/null
		echo "$cron_line"
	) | crontab -
	log "[INFO] Cron job installed to run every 30 minutes."
}

# === Classify image by brightness ===
classify_image() {
	local file="$1"
	local brightness
	brightness=$(convert "$file" -resize 1x1 -colorspace Gray -format "%[fx:int(255*mean)]" info: 2>/dev/null || echo "")
	[[ -z "$brightness" ]] && brightness=0

	if ((brightness >= THRESHOLD)); then
		echo "day"
	else
		echo "night"
	fi
}

# === Move image handling duplicate logic ===
MASS_RENAME_SUFFIX=""

move_image() {
	local file="$1"
	local basename_file
	basename_file=$(basename "$file")

	local classification
	classification=$(classify_image "$file")
	local target_dir="${BASE_DIR}/${classification}"

	mkdir -p "$target_dir"

	local dest="$target_dir/$basename_file"

	if [[ -e "$dest" && "$FORCE" != true ]]; then
		if [[ -n "$MASS_RENAME_SUFFIX" ]]; then
			dest="${dest%.*}${MASS_RENAME_SUFFIX}.${dest##*.}"
		else
			local choice
			choice=$(prompt_duplicate_resolution "$dest" "$file")
			case "$choice" in
			1)
				dest="${dest%.*}_$(date +%s).${dest##*.}"
				;;
			2)
				MASS_RENAME_SUFFIX="_$(date +%s)"
				dest="${dest%.*}${MASS_RENAME_SUFFIX}.${dest##*.}"
				;;
			*)
				log "[SKIP] Duplicate skip: $file"
				return
				;;
			esac
		fi
	fi

	if [[ "$DRY_RUN" == true ]]; then
		log "[DRY-RUN] Would move $file -> $dest"
	else
		mv -n "$file" "$dest"
		log "[OK] Moved $file -> $dest"
	fi
}

export -f move_image classify_image prompt_duplicate_resolution log
export THRESHOLD BASE_DIR FORCE DRY_RUN

# === Find images to process ===
get_images_to_process() {
	if [[ -n "$ONLY_FOLDER" ]]; then
		find "$BASE_DIR/$ONLY_FOLDER" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" \) -print0
	else
		find "$BASE_DIR" -maxdepth 1 -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" \) -print0
	fi
}

# === Cleanup empty folders ===
cleanup_empty_folders() {
	find "$BASE_DIR" -mindepth 1 -type d ! -path "$DAY_DIR" ! -path "$NIGHT_DIR" | while read -r dir; do
		if [[ -z "$(ls -A "$dir")" ]]; then
			if [[ "$DRY_RUN" == false ]]; then
				rmdir "$dir"
				log "[CLEAN] Removed empty folder: $dir"
			else
				log "[DRY-RUN] Would remove empty folder: $dir"
			fi
		fi
	done
}

# === Cleanup non-empty folders with confirmation ===
cleanup_non_empty_folders() {
	find "$BASE_DIR" -mindepth 1 -type d ! -path "$DAY_DIR" ! -path "$NIGHT_DIR" | while read -r dir; do
		if [[ "$(ls -A "$dir")" ]]; then
			echo -e "\n[WARN] Folder not empty: $dir"
			echo "Contents:"
			ls -1 "$dir"
			if prompt_yes_no "Delete this folder and all its contents? (default No)"; then
				if [[ "$DRY_RUN" == false ]]; then
					rm -rf "$dir"
					log "[DELETED] Removed folder with contents: $dir"
				else
					log "[DRY-RUN] Would remove folder with contents: $dir"
				fi
			else
				log "[SKIP] Skipped deleting folder: $dir"
			fi
		fi
	done
}

# === Main sorting loop ===
main() {
	while :; do
		mapfile -d '' files < <(get_images_to_process)
		total=${#files[@]}

		if ((total == 0)); then
			log "[INFO] No images found to sort."
			[[ "$LOOP" == true ]] && sleep 3600 || break
			continue
		fi

		if [[ "$VERBOSE" == true ]]; then
			echo "Found $total images to process."
		fi

		printf '%s\0' "${files[@]}" | xargs -0 -n1 -P "$JOBS" bash -c 'move_image "$0"'

		cleanup_non_empty_folders
		cleanup_empty_folders

		log "[INFO] Sorting pass complete. Processed $total images."

		[[ "$LOOP" == true ]] && sleep 3600 || break
	done
}

# === Interactive menu ===
interactive_menu() {
	echo "=== Wallpaper Sorter Interactive Menu ==="
	PS3="Select an option (or Ctrl+C to quit): "
	options=(
		"Run sorting once"
		"Run continuously (--loop)"
		"Setup systemd timer"
		"Setup cron job"
		"Exit"
	)
	select opt in "${options[@]}"; do
		case $REPLY in
		1)
			log "Running sorting once..."
			LOOP=false
			main
			break
			;;
		2)
			log "Running sorting continuously..."
			LOOP=true
			main
			break
			;;
		3)
			log "Setting up systemd timer..."
			setup_systemd_timer
			break
			;;
		4)
			log "Setting up cron job..."
			setup_cron_job
			break
			;;
		5)
			echo "Exiting."
			exit 0
			;;
		*)
			echo "Invalid option."
			;;
		esac
	done
}

# === Script entry point ===
if [[ $# -eq 0 ]]; then
	interactive_menu
else
	# Parse CLI args manually because we want to avoid getopt
	while (("$#")); do
		case "$1" in
		--force) FORCE=true ;;
		--verbose) VERBOSE=true ;;
		--dry-run) DRY_RUN=true ;;
		--only-folder)
			shift
			ONLY_FOLDER="$1"
			;;
		--loop) LOOP=true ;;
		--setup-timer)
			setup_systemd_timer
			exit 0
			;;
		--setup-cron)
			setup_cron_job
			exit 0
			;;
		--help)
			echo "Usage: $0 [options]"
			echo "Options:"
			echo "  --force          Overwrite duplicates without prompt"
			echo "  --verbose        Verbose logging"
			echo "  --dry-run        Show actions without performing"
			echo "  --only-folder F  Only process images inside folder F"
			echo "  --loop           Run continuously every hour"
			echo "  --setup-timer    Install systemd timer"
			echo "  --setup-cron     Install cron job"
			echo "  --help           Show this help"
			exit 0
			;;
		*)
			echo "Unknown option: $1"
			exit 1
			;;
		esac
		shift
	done
	main
fi
